#include <iostream>
#include <vector>
#include <unordered_map>
using namespace std;

vector<int> twoSum(vector<int>& nums, int target) {
unordered_map<int, int> seen; // stores number -> index
for (int i = 0; i < nums.size(); i++) {
int complement = target - nums[i];
if (seen.find(complement) != seen.end()) {
// Found the pair
return {seen[complement], i};
}
// store current number and its index
seen[nums[i]] = i;
}
return {}; // should never reach here if one solution is guaranteed
}

int main() {
vector<int> nums = {2, 7, 11, 15};
int target = 9;

vector<int> result = twoSum(nums, target);
cout << "[" << result[0] << "," << result[1] << "]" << endl;

return 0;
}
